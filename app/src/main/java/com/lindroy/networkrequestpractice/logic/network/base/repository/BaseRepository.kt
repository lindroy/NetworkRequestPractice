package com.lindroy.networkrequestpractice.logic.network.base.repositoryimport androidx.lifecycle.LiveDataimport androidx.lifecycle.liveDataimport com.lindroy.networkrequestpractice.logic.model.*import com.lindroy.networkrequestpractice.logic.network.base.RequestExceptionimport com.lindroy.networkrequestpractice.logic.network.base.observer.BaseResponseimport com.lindroy.networkrequestpractice.logic.network.handleExceptionimport kotlinx.coroutines.Dispatchersimport kotlin.coroutines.CoroutineContext/** * @author Lin * @date 2021/10/15 * @function 唯一数据源 */abstract class BaseRepository {    protected fun <T> fire(        context: CoroutineContext = Dispatchers.IO,        block: suspend () -> BaseResponse<T>    ): LiveData<BaseResponse<T>> = liveData(context) {        this.runCatching {            emit(StartResponse())            block()        }.onSuccess {            //status code 为200，继续判断 errorCode 是否为 0            emit(                when (it.success) {                    true -> checkEmptyResponse(it.data)                    false -> FailureResponse(handleException(RequestException(it)))                }            )        }.onFailure { throwable ->            emit(FailureResponse(handleException(throwable)))        }    }    /**     * data 为 null，或者 data 是集合类型，但是集合为空都会进入 onEmpty 回调     */    private fun <T> checkEmptyResponse(data: T?): ApiResponse<T> =        if (data == null || (data is List<*> && (data as List<*>).isEmpty())) {            EmptyResponse()        } else {            SuccessResponse(data)        }}